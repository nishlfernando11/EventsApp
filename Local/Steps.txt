1. Set up DB MongoDB

https://hub.docker.com/_/mongo

use docker compose yaml file
docker exec -it my-mongodb mongosh -u admin -p password --authenticationDatabase admin


# Use Azure kubernetes context
kc config use-context invite-cluster

## Azure deployment

Steps 


# Create RG: 

az group create --name invite-rg --location australiaeast 

 

#Create container registry 

export ACRNAME=inviteacr 

az acr create --resource-group invite-rg --name $ACRNAME --sku Basic 


#Create kubernetes cluster 

az aks create --resource-group invite-rg --name invite-cluster --node-vm-size Standard_D4s_v3 --node-count 1 --generate-ssh-keys --attach-acr $ACRNAME 

az aks create --resource-group invite-rg --name invite-cluster --node-vm-size Standard_D2s_v3 --node-count 1 --generate-ssh-keys --attach-acr $ACRNAME 

#Connect to cluster 

az aks get-credentials --resource-group invite-rg --name invite-cluster 

## Ordered Steps 

1. kc apply -f azrdeployment.yaml
2. kc apply -f database.yaml
3. Configure database to elect primary 

Login to 0th replica  

kc exec mongo-replica-0 -it -n ingress-nginx -- mongosh

Run below to initiate replica set 

rs.initiate( {
_id: "rs0",
members: [
{ _id: 0, host: " mongo-replica-0.mongo:27017"},
{ _id: 1, host: " mongo-replica-1.mongo:27017"},
{ _id: 2, host: " mongo-replica-2.mongo:27017"}
]
})

rs.initiate( {
_id: "rs0",
members: [
{ _id: 0, host: " mongo-replica-0.mongo:27017"},
{ _id: 1, host: " mongo-replica-1.mongo:27017"}
]
})
 

#Verify changes  

rs.status() 

#New primary should be selected 

#Now set up authenticationDatabase

admin = db.getSiblingDB('admin');
admin.createUser({ user: 'root', pwd: 'password', roles: [ { role: 'root', db: 'admin'}]});

#verify changes synced to secondary nodes

# add --auth flag to db yaml command and rerun below

kc apply -f database.yaml

4. kc apply -f hpa.yaml

5. Ingress controller 
kc apply -f az-nginx-ingress-ctl.yaml 
or
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/cloud/deploy.yaml

(kc apply -f nginx-ingress-ctl.yaml )

6. Get external IP of ingress controller and update in azingress.yaml and client acr build env arg

kc get services -o wide -w -n ingress-nginx

## AKS
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ztls.key -out ztls.crt -subj "/CN=myeventson.online"
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ztls.key -out ztls.crt -subj "/CN=myeventson.online" -addext "subjectAltName=DNS:myeventson.online"

kc apply -f az-tls-secret.yaml / kc apply -f tls-secret.yaml

7. Push built images to acr 

az acr build --registry $ACRNAME --image inviteapp/ivt-dev:1 ./developers/ --build-arg=REACT_APP_SERVER_URL=https://myeventson.online

az acr build --registry $ACRNAME --image inviteapp/ivt-server:1 ./server/ 

# without url [NO USE]
az acr build --registry $ACRNAME --image inviteapp/ivt-client:1 ./client/ --build-arg=NEXT_PUBLIC_API_URL=http://localhost:3003

# with service url [NO USE]
az acr build --registry $ACRNAME --image inviteapp/ivt-client:1 ./client/ --build-arg=NEXT_PUBLIC_API_URL=http://20.53.166.71:3003

# ALT: by IP address and port/ urls [USE]
az acr build --registry $ACRNAME --image inviteapp/ivt-client:1 ./client/ --build-arg=NEXT_PUBLIC_API_URL=https://myeventson.online
----

8. Apply server, client and developer

kc apply -f server.yaml
kc apply -f client.yaml
kc apply -f developer.yaml

9. Apply Ingress
kc apply -f azingress.yaml 

### END SETUP###
# Update manifest file by prefixing the image: [DONE: FIRST time only]

az acr list --resource-group invite-rg --query "[].{acrLoginServer:loginServer}" --output table 

az aks show --resource-group invite-rg --name invite-cluster  --query nodeResourceGroup -o tsv


Modify manifest for deployment 

Check file 

 

### TODO

check OTP verification if it is needed to register and pay for events
add disable config to demonstrate scaling


##generate self signed ssl
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=localhost/O=localhost"

## localhost
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout tls.key -out tls.crt -subj "/CN=localhost"

## AKS
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ztls.key -out ztls.crt -subj "/CN=myeventson.online"
openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ztls.key -out ztls.crt -subj "/CN=myeventson.online" -addext "subjectAltName=DNS:myeventson.online"

minikube addons enable ingress
kc get ingress
minikube tunnel


## scaling demonstrate

while true ; curl http://localhost:3003/ ; done


// BASE 64 ENCODING ON TERMINAL
// echo -n 'value' | base64 