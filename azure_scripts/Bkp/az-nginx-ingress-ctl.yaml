
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-ingress
#   namespace: ingress-nginx
#   labels:
#     app: nginx-ingress
# spec:
#   type: LoadBalancer
#   selector:
#     app: nginx-ingress
#   ports:
#   - port: 80
#     name: http
#     appProtocol: http
#     protocol: TCP
#     targetPort: 80
#   - port: 443
#     name: https
#     appProtocol: https
#     protocol: TCP
#     targetPort: 443
# ---
# apiVersion: networking.k8s.io/v1
# kind: IngressClass
# metadata:
#   name: nginx
# spec:
#   controller: k8s.io/ingress-nginx
# ---
# apiVersion: v1
# kind: ServiceAccount
# automountServiceAccountToken: true
# metadata:
#   name: nginx-ingress-serviceaccount
#   namespace: ingress-nginx
# ---
# apiVersion: v1
# kind: ConfigMap
# metadata:
#   name: nginx-configuration
#   namespace: ingress-nginx
#   labels:
#     app: nginx-ingress
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: nginx-ingress-clusterrole
#   namespace: ingress-nginx
# rules:
#   - apiGroups:
#       - ""
#     resources:
#       - configmaps
#       - endpoints
#       - nodes
#       - pods
#       - secrets
#       - services
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - ""
#     resources:
#       - nodes
#     verbs:
#       - get
#   - apiGroups:
#       - "extensions"
#     resources:
#       - ingresses
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - "extensions"
#     resources:
#       - ingresses/status
#     verbs:
#       - update
#   - apiGroups:
#       - "extensions"
#     resources:
#       - ingresses
#     verbs:
#       - create
#       - update
#   - apiGroups:
#       - "networking.k8s.io"
#     resources:
#       - ingresses
#       - ingressclasses
#     verbs:
#       - get
#       - list
#       - watch
#   - apiGroups:
#       - "networking.k8s.io"
#     resources:
#       - ingresses/status
#     verbs:
#       - update
#   - apiGroups:
#       - ""
#     resources:
#       - events
#     verbs:
#       - create
#       - patch
#   - apiGroups:
#       - "networking.k8s.io"
#     resources:
#       - ingresses
#     verbs:
#       - create
#       - update
#   - apiGroups:
#       - discovery.k8s.io
#     resources:
#       - endpointslices
#     verbs:
#       - list
#       - watch
#       - get
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   name: nginx-ingress-clusterrole-binding
#   labels:
#     app: nginx-ingress
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: nginx-ingress-clusterrole
# subjects:
# - kind: ServiceAccount
#   name: nginx-ingress-serviceaccount
#   namespace: ingress-nginx
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: Role
# metadata:
#   name: nginx-ingress-role
#   namespace: ingress-nginx
#   labels:
#     app: nginx-ingress
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - namespaces
#   - configmaps
#   - pods
#   verbs:
#   - get
#   - list
#   - watch
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: RoleBinding
# metadata:
#   name: nginx-ingress-role-binding
#   namespace: ingress-nginx
#   labels:
#     app: nginx-ingress
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: Role
#   name: nginx-ingress-role
# subjects:
# - kind: ServiceAccount
#   name: nginx-ingress-serviceaccount
#   namespace: ingress-nginx
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx-ingress-controller
#   labels:
#     app: nginx-ingress
#   namespace: ingress-nginx
# spec:
#   replicas: 1
#   selector:
#     matchLabels:
#       app: nginx-ingress
#   template:
#     metadata:
#       labels:
#         app: nginx-ingress
#     spec:
#       serviceAccountName: nginx-ingress-serviceaccount
#       containers:
#       - name: nginx-ingress-controller
#         imagePullPolicy: IfNotPresent
#         image: registry.k8s.io/ingress-nginx/controller:v1.10.1@sha256:e24f39d3eed6bcc239a56f20098878845f62baa34b9f2be2fd2c38ce9fb0f29e
#         # image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.33.0
#         args:
#         - /nginx-ingress-controller
#         - --configmap=$(POD_NAMESPACE)/nginx-configuration
#         - --controller-class=k8s.io/ingress-nginx
#         - --ingress-class=nginx
#         # - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
#         # - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
#         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
#         # - --annotations-prefix=nginx.ingress.kubernetes.io
#         # livenessProbe:
#         #   failureThreshold: 5
#         #   httpGet:
#         #     path: /healthz
#         #     port: 10254
#         #     scheme: HTTP
#         #   initialDelaySeconds: 10
#         #   periodSeconds: 10
#         #   successThreshold: 1
#         #   timeoutSeconds: 1
#         # readinessProbe:
#         #   failureThreshold: 3
#         #   httpGet:
#         #     path: /healthz
#         #     port: 10254
#         #     scheme: HTTP
#         #   initialDelaySeconds: 10
#         #   periodSeconds: 10
#         #   successThreshold: 1
#         #   timeoutSeconds: 1
#         resources:
#           requests:
#             cpu: 100m
#             memory: 90Mi
#         env:
#         - name: POD_NAME
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.name
#         - name: POD_NAMESPACE
#           valueFrom:
#             fieldRef:
#               fieldPath: metadata.namespace
#         ports:
#         - name: http
#           protocol: TCP
#           containerPort: 80
#         - name: https
#           protocol: TCP
#           containerPort: 443

